<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.pettopia.notice.NoticeMapper">
	
	<!-- 오자윤 : /notice/noticeOne : 공지사항 삭제 -->
	<delete id="deleteNotice" parameterType="Integer">
	DELETE FROM notice WHERE notice_no = #{noticeNo}
	</delete>
	
	<!-- 오자윤 : /notice/addNotice 공지사항 추가, 자동 생성된 키 반환 -->
	<insert id="insertNotice" parameterType="com.example.pettopia.vo.Notice">
    <selectKey resultType="Integer" keyProperty="noticeNo" order="AFTER">
        SELECT LAST_INSERT_ID()
    </selectKey>
	    INSERT INTO notice (
	        writer_emp_no,
	        dept_code,
	        notice_title,
	        notice_content,
	        notice_view,
	        is_pinned,
	        create_datetime,
	        update_datetime
	    )
	    VALUES (
	        #{writerEmpNo},
	        #{deptCode},
	        #{noticeTitle},
	        #{noticeContent},
	        0,  
	        #{isPinned},
	        NOW(),
	        NOW()
	    )
	</insert>
	

	<!-- 공지사항 리스트 : 부서 목록 -->
	<select id="selectDivisionList" resultType="com.example.pettopia.vo.Division">
		SELECT division_code divisionCode
				, division_name divisionName
		FROM division
	</select>


	<!-- 공지사항 리스트 : 게시글 목록 -->
		<select id="selectNoticeList" parameterType="map" resultType="map">  
	    WITH noticeList AS (  
	        (SELECT  
	            n.notice_no,  
	            n.writer_emp_no,  
	            e.emp_name,  
	            n.dept_code,  
	            COALESCE(di1.division_code, di2.division_code) AS division_code,  
	            COALESCE(di1.division_name, di2.division_name, 'ALL') AS division_name,  
	            n.notice_title,  
	            n.notice_view,  
	            n.create_datetime,  
	            n.is_pinned  
	        FROM notice n  
	        LEFT OUTER JOIN department d ON n.dept_code = d.dept_code  
	        LEFT OUTER JOIN division di1 ON d.division_code = di1.division_code  
	        LEFT OUTER JOIN division di2 ON n.dept_code = di2.division_code  
	        LEFT OUTER JOIN employee e ON n.writer_emp_no = e.emp_no  
	        <where>  
	            <if test="division != null">  
	                (COALESCE(di1.division_code, di2.division_code) LIKE #{division} OR di1.division_code IS NULL)  
	            </if>  
	            AND n.is_pinned = 'Y'  
	        </where>  
	        )  
	        
	        UNION ALL  
	        
	        (SELECT  
	            n.notice_no,  
	            n.writer_emp_no,  
	            e.emp_name,  
	            n.dept_code,  
	            COALESCE(di1.division_code, di2.division_code) AS division_code,  
	            COALESCE(di1.division_name, di2.division_name, 'ALL') AS division_name,  
	            n.notice_title,  
	            n.notice_view,  
	            n.create_datetime,  
	            n.is_pinned  
	        FROM notice n  
	        LEFT OUTER JOIN department d ON n.dept_code = d.dept_code  
	        LEFT OUTER JOIN division di1 ON d.division_code = di1.division_code  
	        LEFT OUTER JOIN division di2 ON n.dept_code = di2.division_code  
	        LEFT OUTER JOIN employee e ON n.writer_emp_no = e.emp_no  
	        <where>  
	            <if test="searchTitle != null">  
	                n.notice_title LIKE CONCAT('%', #{searchTitle}, '%')  
	            </if>  
	            <if test="division != null">  
	                AND (COALESCE(di1.division_code, di2.division_code) LIKE #{division})  
	            </if>  
	            AND n.is_pinned = 'N'  
	        </where>  
	        )  
	    )  
	
	    SELECT  
	        notice_no AS noticeNo,  
	        writer_emp_no AS empNo,  
	        emp_name AS empName,  
	        dept_code AS deptCode,  
	        division_code AS divisionCode,  
	        division_name AS divisionName,  
	        notice_title AS noticeTitle,  
	        notice_view AS noticeView,  
	        create_datetime AS createDate,  
	        is_pinned AS isPinned  
	    FROM noticeList  
	    ORDER BY  
	        CASE  
	            WHEN is_pinned = 'Y' THEN 0  -- Pinned notices appear first  
	            WHEN is_pinned = 'N' THEN 1  
	            ELSE 2  
	        END,  
	        create_datetime DESC  -- Newer notices appear before older ones  
	</select>  



	<!-- 공지사항 수정 : 제목, 내용, 부서, 조회수, 고정여부 -->
	<!-- 공지사항 상세보기 : 조회수 증가 -->
	<update id="updateNotice" parameterType="com.example.pettopia.vo.Notice" >
		UPDATE notice 
		<set>
			<if test="noticeTitle != null and noticeTitle != '' ">
				notice_title = #{noticeTitle},
			</if>
			<if test="noticeContent != null and noticeContent != '' ">
				notice_content = #{noticeContent},
			</if>

			<if test="isPinned != null and isPinned != '' ">
				is_pinned = #{isPinned},
			</if>
			<if test="updateDatetime != null and updateDatetime != '' ">
				update_datetime = now()
			</if>
			notice_view = notice_view + 1,	
		</set>
		
		WHERE notice_no = #{noticeNo} 
	</update>

	<!-- 공지사항 상세보기 : 해당 공지사항 조회 -->
	<select id="selectNoticeOne" parameterType="int" resultType="map">
		SELECT n.notice_no AS noticeNo
				, n.writer_emp_no AS writerEmpNo
				, e.emp_name AS empName
				, n.dept_code AS deptCode
				, di.division_code AS divisionCode
				, di.division_name AS divisionName
				, n.notice_title AS noticeTitle
				, n.notice_content AS noticeContent
				, n.notice_view AS noticeView
				, n.create_datetime AS createDateTime
				, n.is_pinned AS isPinned
		FROM notice n 
		LEFT OUTER JOIN department d ON n.dept_code = d.dept_code
		LEFT OUTER JOIN division di ON d.division_code = di.division_code
		LEFT OUTER JOIN employee e ON n.writer_emp_no = e.emp_no
		WHERE n.notice_no = #{noticeNo}
	</select>





	
</mapper>