<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.pettopia.employee.EmployeeMapper">
	
	<!-- 로그인 -->
	<select id="selectEmployeeInfo" parameterType="String" resultType="com.example.pettopia.vo.Employee">
		SELECT emp_no empNo
			, emp_pw empPw
			, emp_name empName
			, emp_email empEmail
			, emp_status empStatus
			, is_team_leader isTeamLeader
			, dept_code deptCode
			, rank_no rankNo
			, role_name roleName
		FROM employee
		WHERE emp_no = #{empNo}	
	
	</select>

	<!-- addEmployee : 직원 중복 가입 방지 -->
	<select id="selectExistEmployee" parameterType="String" resultType="int" >
		SELECT COUNT(*) AS existEmp
		FROM employee
		WHERE emp_no LIKE #{empNo}
	</select>

	<!-- addEmployee : 직원 정보 등록 -->
	<insert id="insertEmployeeInfo" parameterType="com.example.pettopia.vo.Employee">

		INSERT into employee(emp_no, emp_name, emp_pw, emp_email, emp_birth, emp_gender, emp_phone
									, postal_code, basic_address, detail_address, is_team_leader, dept_code
									, rank_no, role_name, hire_date, resignation_date, create_datetime, update_datetime)
		VALUES(#{empNo}, #{empName}, #{empPw}, TRIM(#{empEmail}), #{empBirth}, #{empGender}, #{empPhone}
				, #{postalCode}, #{basicAddress}, #{detailAddress},  #{isTeamLeader}, #{deptCode}
				, #{rankNo}, #{roleName}, #{hireDate}, #{resignationDate}, now(), now() )
	</insert>

	
	<!-- employeeList : 직원 목록 조회를 위해 로그인한 사원의 소속 부서와 ROLE 확인 -->
	<select id="selectEmpDivRoleInfo" parameterType="String" resultType="map">
		SELECT e.emp_no AS empNo
				, e.emp_name AS empName
				, e.role_name AS roleName
				, di.division_name AS divisionName
				, di.division_code AS divisionCode
		FROM employee e
		JOIN department d ON e.dept_code = d.dept_code
		JOIN division di ON d.division_code = di.division_code
		WHERE e.emp_no = #{empNo}
	</select>


	<!-- employeeList : 일반 사원은 재직 중인 사원목록만 조회, 인사부 관리자는 모든 사원 목록 조회  -->
	<select id="selectEmployeeList" parameterType="map" resultType="map">
		SELECT e.emp_no AS empNo
		     , e.emp_name AS empName
		     , CONCAT(ef.file_name, ef.file_ext) AS fileName
		     , e.emp_email AS empEmail
		     , CASE WHEN e.emp_status = 'T' THEN '임시'
					WHEN e.emp_status = 'E' THEN '재직'
					WHEN e.emp_status = 'L' THEN '휴직'
					WHEN e.emp_status = 'R' THEN '퇴직'
					ELSE '대기'
			 	END AS empStatus	
		     , di.division_name AS divisionName
		     , di.division_code AS divisionCode
		     , d.dept_name AS deptName
		     , r.rank_name AS rankName
		     , r.rank_no AS rankNo
		     , IFNULL(e.is_team_leader,'N') AS isTeamLeader
		     , e.hire_date AS hireDate
		FROM employee e
		JOIN department d ON e.dept_code = d.dept_code
		JOIN division di ON d.division_code = di.division_code
		JOIN `rank` r ON e.rank_no = r.rank_no
		LEFT OUTER JOIN employee_file ef ON e.emp_no = ef.emp_no
		<where>
		  <if test="isHRAdmin != true">
		     e.emp_status = 'E'
		  </if>
		  <if test="divisionCode != 'null'">
		  	AND di.division_code = #{divisionCode}
		  </if>
		  <if test="empStatus != 'null'">
		  	AND e.emp_status = #{empStatus}
		  </if>
		  	AND (ef.file_purpose = 'P' OR ef.file_purpose IS NULL) 
		</where>
		ORDER BY di.division_name DESC,
	             d.dept_name DESC,
	             r.rank_no DESC,
	             e.emp_name ASC,
	             e.emp_status DESC
	</select>

	<!-- addEmployee : 사번 자동 입력을 위한 마지막 입사 사번 -->
	<select id="selectLatestEmpNo" resultType="String">
		SELECT emp_no AS empNo
		FROM employee
		ORDER BY create_datetime DESC
		LIMIT 1
	</select>

	<!-- sendTempPassword : 입력한 정보와 db 일치 여부 -->
	<select id="selectSimpleEmpInfo" parameterType="com.example.pettopia.vo.Employee" resultType="com.example.pettopia.vo.Employee">
		SELECT emp_no  AS empNo
				, emp_name AS empName
				, emp_email AS empEmail
				, is_team_leader AS isTeamLeader
		FROM employee
		WHERE emp_no LIKE #{empNo}
		AND emp_email LIKE TRIM(#{empEmail})	
	</select>


	<!-- sendTempPassword : 임시비밀번호 발급 후 db 수정 -->
	<update id="updateEmployee" parameterType="com.example.pettopia.vo.Employee">
	    UPDATE employee
	    <set>
	        <if test="empName != null and empName != ''">
	            emp_name = #{empName},
	        </if>
	
	        <if test="empPw != null and empPw != ''">
	            emp_pw = #{empPw},
	        </if>
	
	        <if test="empEmail != null and empEmail != ''">
	            emp_email = #{empEmail},
	        </if>
	
	        <if test="empBirth != null and empBirth != ''">
	            emp_birth = #{empBirth},
	        </if>
	
	        <if test="empGender != null and empGender != ''">
	            emp_gender = #{empGender},
	        </if>
	
	        <if test="empPhone != null and empPhone != ''">
	            emp_phone = #{empPhone},
	        </if>
	
	        <if test="postalCode != null and postalCode != ''">
	            postal_code = #{postalCode},
	        </if>
	
	        <if test="basicAddress != null and basicAddress != ''">
	            basic_address = #{basicAddress},
	        </if>
	
	        <if test="detailAddress != null and detailAddress != ''">
	            detail_address = #{detailAddress},
	        </if>
	
	        <if test="empStatus != null and empStatus != ''">
	            emp_status = #{empStatus},
	        </if>
	
	        <if test="deptCode != null and deptCode != ''">
	            dept_code = #{deptCode},
	        </if>
	
	        <if test="rankNo != null">
	            rank_no = #{rankNo},
	        </if>
	
	        <if test="roleName != null and roleName != ''">
	            role_name = #{roleName},
	        </if>
	
	        <if test="hireDate != null">
	            hire_date = #{hireDate},
	        </if>
	
            <if test="resignationDate != null and resignationDate != ''">
                resignation_date = now(),
            </if>
            
            <if test="resignationDate == null and resignationDate == ''">
                resignation_date = null,
            </if>

	        <if test="isTeamLeader == ''">
	        	is_team_leader = null,
	    	</if>
	    	
	    	<if test="isTeamLeader != null and isTeamLeader != '' ">
	    		is_team_leader = #{isTeamLeader},
	    	</if>
	        update_datetime = now()
	    </set>
	    WHERE emp_no = #{empNo}
	</update>	

	<!-- employeeOne : 마이페이지 상세 정보 -->
	<select id="selectEmployeeOne" parameterType="String" resultType="map">
		SELECT e.emp_no AS empNo
				, ef.emp_file_no AS empFileNo
				, CONCAT(ef.file_name,ef.file_ext) AS empFileName
				, e.emp_name AS empName
				, e.emp_email AS empEmail
				, e.emp_birth AS empBirth
				, e.emp_status AS empStatus
				, e.is_team_leader AS isTeamLeader
				, CASE WHEN e.emp_gender = 'F' THEN '여성' ELSE '남성'END AS empGender
				, e.emp_phone AS empPhone
				, e.postal_code AS postalCode
				, e.basic_address AS basicAddress
				, e.detail_address AS detailAddress
				, e.hire_date as hireDate
				, di.division_code AS divisionCode
				, di.division_name AS divisionName
				, e.dept_code AS deptCode
				, d.dept_name AS deptName 
				, r.rank_no AS rankNo
				, r.rank_name AS rankName
		FROM employee e 
		JOIN employee_file ef ON e.emp_no = ef.emp_no
		JOIN department d ON e.dept_code = d.dept_code
		JOIN division di ON d.division_code = di.division_code
		JOIN `rank` r ON e.rank_no = r.rank_no
		WHERE e.emp_no LIKE #{empNo}
		AND (ef.file_purpose = 'P' OR ef.file_purpose IS NULL) 
	</select>

	<!-- employeeSummary : 직원 공식 정보 상세보기 -->
	<select id="selectEmployeeSummary" parameterType="String" resultType="map">
		SELECT e.emp_no AS empNo
		     , e.emp_name AS empName
		     , CONCAT(ef.file_name, ef.file_ext) AS fileName
		     , e.emp_email AS empEmail
		     , e.emp_phone AS empPhone
		     , CASE WHEN e.emp_status = 'T' THEN '임시'
						WHEN e.emp_status = 'E' THEN '재직'
						WHEN e.emp_status = 'L' THEN '휴직'
						WHEN e.emp_status = 'R' THEN '퇴직'
						ELSE '대기'
				 END 	AS empStatus
		     , d.dept_ext AS deptExt
		     , di.division_name AS divisionName
		     , d.dept_name AS deptName
		     , r.rank_name AS rankName
		     , IFNULL(e.is_team_leader,'N') AS isTeamLeader
		     , e.hire_date AS hireDate
		FROM employee e 
		LEFT OUTER JOIN employee_file ef ON e.emp_no = ef.emp_no
		JOIN department d ON e.dept_code = d.dept_code
		JOIN division di ON d.division_code = di.division_code
		JOIN `rank` r ON e.rank_no = r.rank_no
		WHERE e.emp_no = #{empNo}
		AND (ef.file_purpose = 'P' OR ef.file_purpose IS NULL)  
	</select>

	<!-- 메세지 알림 -->
	<select id="selectNotReadYet" parameterType="String" resultType="map">
		SELECT COUNT(*) AS notReadYet
		FROM message 
		WHERE recipient_emp_no = #{empNo}
		AND message_state = 'N'
		AND message_bin = '0'
	</select>


</mapper>